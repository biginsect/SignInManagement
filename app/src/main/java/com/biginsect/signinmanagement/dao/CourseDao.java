package com.biginsect.signinmanagement.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.biginsect.signinmanagement.dao.Course.IntegerConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COURSE".
*/
public class CourseDao extends AbstractDao<Course, Long> {

    public static final String TABLENAME = "COURSE";

    /**
     * Properties of entity Course.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CourseId = new Property(0, long.class, "courseId", true, "_id");
        public final static Property CourseName = new Property(1, String.class, "courseName", false, "COURSE_NAME");
        public final static Property TeacherId = new Property(2, long.class, "teacherId", false, "TEACHER_ID");
        public final static Property TeacherName = new Property(3, String.class, "teacherName", false, "TEACHER_NAME");
        public final static Property Start = new Property(4, int.class, "start", false, "START");
        public final static Property Step = new Property(5, int.class, "step", false, "STEP");
        public final static Property Day = new Property(6, int.class, "day", false, "DAY");
        public final static Property ColorRandom = new Property(7, int.class, "colorRandom", false, "COLOR_RANDOM");
        public final static Property StartTime = new Property(8, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(9, long.class, "endTime", false, "END_TIME");
        public final static Property WeekList = new Property(10, String.class, "weekList", false, "WEEK_LIST");
    }

    private final IntegerConverter weekListConverter = new IntegerConverter();

    public CourseDao(DaoConfig config) {
        super(config);
    }
    
    public CourseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COURSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: courseId
                "\"COURSE_NAME\" TEXT," + // 1: courseName
                "\"TEACHER_ID\" INTEGER NOT NULL ," + // 2: teacherId
                "\"TEACHER_NAME\" TEXT," + // 3: teacherName
                "\"START\" INTEGER NOT NULL ," + // 4: start
                "\"STEP\" INTEGER NOT NULL ," + // 5: step
                "\"DAY\" INTEGER NOT NULL ," + // 6: day
                "\"COLOR_RANDOM\" INTEGER NOT NULL ," + // 7: colorRandom
                "\"START_TIME\" INTEGER NOT NULL ," + // 8: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 9: endTime
                "\"WEEK_LIST\" TEXT);"); // 10: weekList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COURSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Course entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(2, courseName);
        }
        stmt.bindLong(3, entity.getTeacherId());
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(4, teacherName);
        }
        stmt.bindLong(5, entity.getStart());
        stmt.bindLong(6, entity.getStep());
        stmt.bindLong(7, entity.getDay());
        stmt.bindLong(8, entity.getColorRandom());
        stmt.bindLong(9, entity.getStartTime());
        stmt.bindLong(10, entity.getEndTime());
 
        List weekList = entity.getWeekList();
        if (weekList != null) {
            stmt.bindString(11, weekListConverter.convertToDatabaseValue(weekList));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Course entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
 
        String courseName = entity.getCourseName();
        if (courseName != null) {
            stmt.bindString(2, courseName);
        }
        stmt.bindLong(3, entity.getTeacherId());
 
        String teacherName = entity.getTeacherName();
        if (teacherName != null) {
            stmt.bindString(4, teacherName);
        }
        stmt.bindLong(5, entity.getStart());
        stmt.bindLong(6, entity.getStep());
        stmt.bindLong(7, entity.getDay());
        stmt.bindLong(8, entity.getColorRandom());
        stmt.bindLong(9, entity.getStartTime());
        stmt.bindLong(10, entity.getEndTime());
 
        List weekList = entity.getWeekList();
        if (weekList != null) {
            stmt.bindString(11, weekListConverter.convertToDatabaseValue(weekList));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Course readEntity(Cursor cursor, int offset) {
        Course entity = new Course( //
            cursor.getLong(offset + 0), // courseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // courseName
            cursor.getLong(offset + 2), // teacherId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // teacherName
            cursor.getInt(offset + 4), // start
            cursor.getInt(offset + 5), // step
            cursor.getInt(offset + 6), // day
            cursor.getInt(offset + 7), // colorRandom
            cursor.getLong(offset + 8), // startTime
            cursor.getLong(offset + 9), // endTime
            cursor.isNull(offset + 10) ? null : weekListConverter.convertToEntityProperty(cursor.getString(offset + 10)) // weekList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Course entity, int offset) {
        entity.setCourseId(cursor.getLong(offset + 0));
        entity.setCourseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTeacherId(cursor.getLong(offset + 2));
        entity.setTeacherName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStart(cursor.getInt(offset + 4));
        entity.setStep(cursor.getInt(offset + 5));
        entity.setDay(cursor.getInt(offset + 6));
        entity.setColorRandom(cursor.getInt(offset + 7));
        entity.setStartTime(cursor.getLong(offset + 8));
        entity.setEndTime(cursor.getLong(offset + 9));
        entity.setWeekList(cursor.isNull(offset + 10) ? null : weekListConverter.convertToEntityProperty(cursor.getString(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Course entity, long rowId) {
        entity.setCourseId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Course entity) {
        if(entity != null) {
            return entity.getCourseId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Course entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
