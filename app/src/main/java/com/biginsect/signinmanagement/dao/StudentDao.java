package com.biginsect.signinmanagement.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT".
*/
public class StudentDao extends AbstractDao<Student, Long> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StudentId = new Property(0, Long.class, "studentId", true, "_id");
        public final static Property StudentName = new Property(1, String.class, "studentName", false, "STUDENT_NAME");
        public final static Property StudentPassword = new Property(2, String.class, "studentPassword", false, "STUDENT_PASSWORD");
    }


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: studentId
                "\"STUDENT_NAME\" TEXT," + // 1: studentName
                "\"STUDENT_PASSWORD\" TEXT);"); // 2: studentPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindLong(1, studentId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(2, studentName);
        }
 
        String studentPassword = entity.getStudentPassword();
        if (studentPassword != null) {
            stmt.bindString(3, studentPassword);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
 
        Long studentId = entity.getStudentId();
        if (studentId != null) {
            stmt.bindLong(1, studentId);
        }
 
        String studentName = entity.getStudentName();
        if (studentName != null) {
            stmt.bindString(2, studentName);
        }
 
        String studentPassword = entity.getStudentPassword();
        if (studentPassword != null) {
            stmt.bindString(3, studentPassword);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // studentId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // studentName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // studentPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setStudentId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStudentName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStudentPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Student entity, long rowId) {
        entity.setStudentId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Student entity) {
        if(entity != null) {
            return entity.getStudentId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Student entity) {
        return entity.getStudentId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
